///////////////////////////////////////////////////////////////////////////////
// Grid                                                                      //
///////////////////////////////////////////////////////////////////////////////

@use "sass:math";
@import "scaffold";

// stylelint-disable

// Mobile
$columns-mob  : 4;                // Columns number
$gap-mob      : 1rem;             // Gutter width
$gap-mob-out  : 1.3333333333rem;  // External gutter width

// Desktop
$columns      : 12;               // Columns number
$gap          : 2rem;             // Gutter width
$gap-out      : 2rem;             // External gutter width

$max-width    : 81.3333333333rem; // Maximum container's width

:root {
  --columns   : #{$columns-mob};
  --gap       : #{$gap-mob};
  --gap-out   : #{$gap-mob-out};
  --gap-delta : calc(var(--gap-out) - var(--gap));
  
  @include media(">desktop") {
    --columns : #{$columns};
    --gap     : #{$gap};
    --gap-out : #{$gap-out};
  }
}

.grid {
  // Oddly, the `repeat()` function doesn't support `calc()`;
  // thus the use of Sass variables and math to set a max width to
  // the grid's container.
  $max-column   : math.div($max-width - ($gap * ($columns - 1)), $columns);
  $max-screen   : $max-width + ($gap-out * 2);
  // stylelint-enable
  
  position: relative;
  display: grid;
  grid-template-rows: auto;
  grid-template-columns: 0 repeat(var(--columns), 1fr) 0;
  gap: var(--gap);
  place-items: stretch start;
  width: 100%;
  margin-right: auto;
  margin-left: auto;
  @include media(">phonelarge") {
    grid-template-columns: var(--gap-delta) repeat(var(--columns), 1fr) var(--gap-delta);
  }
  @include media(">#{$max-screen}") {
    grid-template-columns: 1fr repeat(var(--columns), #{$max-column}) 1fr;
  }
}
